#!/usr/bin/perl -w
use strict;
use warnings;
use POSIX qw(ceil floor);

#
# Beginning of section on time functions
#

sub round {
    my($number) = shift;
    return int($number + .5);
}

sub fix {
    my($number) = shift;
    if ($number > 0)
    {
        return floor($number);
    }
    else
    {
        return -floor(-$number);
    }
}

sub num2strPerso {
    my($number) = shift;
    my $rndA=round($number);
    if ($rndA < 10)
    {
        return "0".$rndA;
    }
    else
    {
        return $rndA;
    }
}

sub IsBissextile {
    my($number) = shift;
    my $rnd1=round($number/4);
    if (4*$rnd1 eq $number)
    {
        if ($number eq 1900)
        {
            return 0;
        }
        if ($number eq 2000)
        {
            return 1;
	}
        if ($number eq 2100)
        {
            return 0;
        }
        return 1;
    }
    else
    {
        return 0;
    }
}

sub Freduction($$)
{
    my ($val1, $val2) = @_;
    if ($val1 eq "0")
    {
        return $val2;
    }
    else
    {
        return $val1.$val2;
    }
}

sub mjd2date($)
{
    my ($nbDay)=@_;
    my $jd=$nbDay+2440000-0.5;

    my $ijd=floor($jd + 0.5);
    my $fjd=$jd - $ijd + 0.5;

    my $days=$fjd;

    my $second = 86400 * $days;
    my $hour   = fix($second/3600);
    $second = $second - 3600*$hour;
    my $minute = fix($second/60);
    $second = $second - 60*$minute;

    my $a = $ijd + 32044;
    my $b = floor((4 * $a + 3) / 146097);
    my $c = $a - floor(($b * 146097) / 4);

    my $d = floor((4 * $c + 3) / 1461);
    my $e = $c - floor((1461 * $d) / 4);
    my $m = floor((5 * $e + 2) / 153);

    my $day   = $e - floor((153 * $m + 2) / 5) + 1;
    my $month = $m + 3 - 12 * floor($m / 10);
    my $year  = $b * 100 + $d - 4800 + floor($m / 10);
    return ($year, $month, $day, $hour, $minute, $second);
}

sub date2mjd($$$$$$)
{
    my ($year, $month, $day, $hour, $minute, $second)=@_;
    my $a = floor((14 - $month)/12);
    my $y = $year + 4800 - $a;
    my $m = $month + 12*$a - 3;
    my $jd = $day + floor((153*$m + 2)/5) + $y*365 + floor($y/4) - floor($y/100) + floor($y/400) - 32045 + ( $second + 60*$minute + 3600*($hour - 12) )/86400;
    my $mjd=$jd-2400000.5;
    return $mjd;
}

sub persoDate2mjd($$$$$$)
{
    my ($year, $month, $day, $hour, $minute, $second)=@_;
    my $VAL1=date2mjd($year, $month, $day, $hour, $minute, $second);
    my $VAL2=date2mjd(1968, 5, 23,   0, 0, 0);
    my $VAL3=$VAL1-$VAL2;
    return $VAL3;
}

sub NEMO_pathTime($)
{
    my ($eDayMJD) = @_;
    my ($eYear, $eMonth, $eDay, $eHour, $eMin, $eSec)=mjd2date($eDayMJD);
    my $strYear=$eYear;
    my $strMonth=num2strPerso($eMonth);
    my $strDay=num2strPerso($eDay);
    my $strHour=num2strPerso($eHour);
    my $strMin=num2strPerso($eMin);
    my $strSec=num2strPerso($eSec);
    my $strRet=$strYear."-".$strMonth."-".$strDay;
    return $strRet;
}






sub GetLineOption($)
{
    my ($strIn) = @_;
    my @VSR=split("", $strIn);
    my $nbChar=scalar(@VSR);
    #
    my $strRed="";
    my $HaveEq=0;
    for (my $iChar=0; $iChar<$nbChar; $iChar++)
    {
	my $eChar=$VSR[$iChar];
	if ($eChar eq "=")
	{
	    $HaveEq=1;
	}
	if ($eChar ne " " && $HaveEq eq 0)
	{
	    $strRed=$strRed.$eChar;
	}
    }
    if ($HaveEq eq 0)
    {
	return "zorglub";
    }
    return $strRed;
}

sub ExtractNamelistSection($)
{
    my ($strIn) = @_;
    $_=$strIn;
    s/ //g;
    my $strIn2=$_;
    my @U=split("", $strIn2);
    if ($U[0] eq "&")
    {
	my $strRet1="";
	for (my $iChar=1; $iChar<scalar(@U); $iChar++)
	{
	    $strRet1=$strRet1.$U[$iChar];
	}
	return $strRet1;
    }
    return "zorglub";
}

#
# The normal code
#

my $uu=scalar(@ARGV);
if ($uu ne 1)
{
    print "SetUp_Boundary_INPUT is used as\n";
    print "SetUp_Boundary_INPUT [TheChoice]\n";
    print "with TheChoice = COPERNICUS or ALADIN \n";
    die;
}

my $TheChoice=$ARGV[0];

#
# time determination
#

my $str = `date -u +%Y%m%d`;
#print "str=".$str."\n";
my @U=split("", $str);
my $year=$U[0].$U[1].$U[2].$U[3];
my $month=$U[4].$U[5];
my $day=$U[6].$U[7];
my $hour=0;
my $minute=0;
my $second=0;

my $StartTimeMJD=persoDate2mjd($year, $month, $day, $hour, $minute, $second);


if ($TheChoice eq "COPERNICUS") {
    for (my $iTime=-80; $iTime<4; $iTime++)
    {
	my $eRelTime = $StartTimeMJD + $iTime;
	my $fRelTime = $eRelTime + 1;
	#
	my $BeginTime = NEMO_pathTime($eRelTime);
	my $EndTime = NEMO_pathTime($fRelTime);
	#
	for (my $iType=0; $iType<2; $iType++)
	{
	    my $eType;
	    my $eDir;
	    if ($iType eq 0)
	    {
		$eType = "COPERNICUS_OTRANTO";
#		$eDir  = "/mnt/KitData/mathieu/CopernicusOtranto/";
#		$eDir  = "/mnt/KetoData/mathieu/CopernicusOtranto/";
		$eDir  = $ENV{"COPERNICUS_OTRANTO"};
	    }
	    if ($iType eq 1)
	    {
		$eType = "COPERNICUS_ADRIATIC";
#		$eDir  = "/mnt/KitData/mathieu/CopernicusAdriatic/";
#		$eDir  = "/mnt/KetoData/mathieu/CopernicusAdriatic/";
		$eDir  = $ENV{"COPERNICUS_ADRIATIC"};
	    }
	    #
	    my $eProg="Download_Day_OceanData";
	    print "SetUp_Forcing eProg=".$eProg."\n";
	    print "SetUp_Forcing eDir=".$eDir."\n";
	    print "SetUp_Forcing eType=".$eType."\n";
	    #
	    my $order=$eProg." ".$BeginTime." ".$EndTime." ".$eDir." ".$eType;
	    print "order=".$order."\n";
	    system $order;
	}
    }
}
#
if ($TheChoice eq "ALADIN") {
    my $BeginTime = $StartTimeMJD - 4;
    my $EndTime   = $StartTimeMJD + 4;
    #
    my $BeginTimeStr = NEMO_pathTime($BeginTime);
    my $EndTimeStr   = NEMO_pathTime($EndTime);
    #
    my $eProg="CopyALADIN_Kernel";
    #
    my $PrefixIn="/home/ivica/OPERATIONAL/ALADIN/";
    my $PrefixOut="/mnt/KetoData/mathieu/ALADIN/";
    #
    my $order=$eProg." ".$BeginTimeStr." ".$EndTimeStr." ".$PrefixIn." ".$PrefixOut;
    print "order=".$order."\n";
    system $order;
    #
}


